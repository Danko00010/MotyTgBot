package ru.danko.moty;

import java.util.HashMap;

import com.pengrad.telegrambot.model.CallbackQuery;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;

import ru.danko.moty.objects.Respon;
import ru.danko.moty.objects.User;
import ru.danko.moty.objects.Users;
import ru.danko.moty.tgbot.Bot;
import ru.danko.moty.tgbot.events.CallbackQueryEvent.onCallBackQueryEvent;

public class onCallBackQuery implements onCallBackQueryEvent {

	@SuppressWarnings("removal")
	@Override
	public void onCallBackQuery(Update up) {
		String data = up.callbackQuery().data();
		Long chatId = up.callbackQuery().message().chat().id();
		CallbackQuery callback = up.callbackQuery();
		String[] dd = data.split(":");
		System.out.println(dd[0]);
		if(dd[0].equals("cancel_option")) {
			User us = Users.conUserName(up.callbackQuery().from().id());
			String[] buts = ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å;"+dd[1]+":"+dd[2]).split("@");
			Bot.editCallBackQuery(chatId, up.callbackQuery().message().messageId(), utils.getKeyboardMarkup(buts));
			us.setRed(null);
			us.setRedMsgId(0);
			return;
		}
		if(dd[0].equalsIgnoreCase("Message")) {
			Bot.sendMessage(up, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.");
			String[] buts = ("–û—Ç–º–µ–Ω–∏—Ç—å;cancel_option:"+data).split("@");
			Bot.editCallBackQuery(chatId, up.callbackQuery().message().messageId(), utils.getKeyboardMarkup(buts));
			User us = Users.conUserName(up.callbackQuery().from().id());
			//String save = data.replace(":", ".");
			us.setRed(data);
			us.setRedMsgId(up.callbackQuery().message().messageId());
			System.out.println(data);
			return;
		}
		if(data.equals("start")) {
			if(chatId<1) return;
			Long userId = up.callbackQuery().message().from().id();
			InlineKeyboardMarkup str  = new InlineKeyboardMarkup();
			Bot.editCallBackQuery(chatId,up.callbackQuery().message().messageId(), str);
			if(!Users.check(userId)){
				if(up.callbackQuery().from().username()== null) {
					Bot.sendMessage(up, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.");
					return;
				}
				Bot.sendMessage(up, Config.getString("welcome"));
				User user = new User(userId, up.callbackQuery().from().username(), -2, up.callbackQuery().from().firstName());
				Users.addUser(user);
			}
			User u = Users.conUserName(userId);
			if(u.getStatus() == -2) {
				if(up.callbackQuery().from().username()== null) {
					Bot.sendMessage(up, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.");
					return;
				}
				Bot.sendMessage(up, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.", utils.getKeyBoard("üë® –ú—É–∂—á–∏–Ω–∞","üë© –ñ–µ–Ω—â–∏–Ω–∞"));
				u.setStatus(-1);
				Users.save(u);
				return;
			}
			
				int status = u.getStatus();
				if(status != 0) {
					if(status >= 1) {
						Bot.sendMessage(up, "–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª.");
						return;
					}
					if(status == -1) {
						if(up.callbackQuery().message().from().username()== null) {
							Bot.sendMessage(up, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.");
							return;
						}
						Bot.sendMessage(up, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.", utils.getKeyBoard("üë® –ú—É–∂—á–∏–Ω–∞","üë© –ñ–µ–Ω—â–∏–Ω–∞"));
						return;
					}
				}
		//"–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å;putInvite@–ó–∞–ø—Ä–æ—Å–∏—Ç—å;callInvite@–ü—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è;justInvite@–û—Ç–º–µ–Ω–∏—Ç—å;cancel".split("@")
			Bot.sendMessage(up, "–¢—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–º–ø–∞—Ç–∏—é, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è?", utils.getKeyBoard("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å","–ó–∞–ø—Ä–æ—Å–∏—Ç—å", "–ü—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è", "–û—Ç–º–µ–Ω–∏—Ç—å"));
			u.setStatus(1);
			Users.save(u);
			return;
		}
		if(data.split("_")[0].equals("accept100")) {
			Long userid = new Long(data.split("_")[1]);
			HashMap<Long, Respon> hash = onNewMessage.getRespons();
			if(!hash.containsKey(up.callbackQuery().from().id())) {
				Bot.sendAnswerCallBackQuery(callback, false, "–ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç.");
				return;
			}
			
			Respon res = hash.get(up.callbackQuery().from().id());
			hash.remove(up.callbackQuery().from().id());
			onNewMessage.newRespons(hash);
			res.accept(new Long(data.split("_")[1]));
			InlineKeyboardMarkup str  = new InlineKeyboardMarkup();
			Bot.editCallBackQuery(chatId,up.callbackQuery().message().messageId(), str);
		
			User us1 = Users.conUserName(up.callbackQuery().message().chat().id());
			int stu = us1.getStatus();
			int in = 0;
			int iin = 0;
			if(stu==101||stu==102) {
				in = 2;
				iin = 1;
			}
			if(stu==201||stu==202) {
				in = 3;
				iin = 2;
			}
			if(stu==301||stu==302) {
				in = 4;
				iin = 3;
			}
			int acceptSt1 = us1.getSt(iin);
			us1.setSt(in, acceptSt1+2);
			Users.save(us1);
			int summ1 = us1.summStatic();
			String cnfMessage1 = Config.getString("Message.add_point_out").replace("%summ%", ""+summ1);
			Bot.sendMessage(us1.getId(), cnfMessage1);
			User us = Users.conUserName(userid);
			int acceptSt = us.getSt(0);
			us.setSt(1, acceptSt+1);
			Users.save(us);
			int summ = us.summStatic();
	
			String cnfMessage = Config.getString("Message.add_point_otk_accept").replace("%summ%", ""+summ);//add_point_otk_accept
			Bot.sendMessage(us.getId(), cnfMessage);
			return;
		}
		if(data.split("_")[0].equals("out100")) {
		Long userid = new Long(data.split("_")[1]);
		String ss = up.callbackQuery().from().id()+"";
		String ss2 = userid+"";
		if(ss.equalsIgnoreCase(ss2)) {
			Bot.sendAnswerCallBackQuery(callback, false, "–ù–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.");
			return;
		}
		HashMap<Long, Respon> hash = onNewMessage.getRespons();
		if(!hash.containsKey(userid)) {
			Bot.sendAnswerCallBackQuery(callback, false, "–ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç.");
			return;
		}
		Respon res = hash.get(userid);
		if(res.checkUser(up.callbackQuery().from().id())) {
			Bot.sendAnswerCallBackQuery(callback, false, "–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.");
			return;
		}
		int i = res.getCoutUsers();
		i++;
		User us = Users.conUserName(up.callbackQuery().from().id());
		res.addUser(us);
		hash.remove(userid);
		hash.put(userid, res);
		onNewMessage.setRespons(hash);
		String[] buts = ("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è +"+i+";out100_"+userid).split("@");
		Bot.editCallBackQuery(chatId ,up.callbackQuery().message().messageId(), utils.getKeyboardMarkup(buts));
		res.ontk(us.getUserName(), up.callbackQuery().from().firstName(), us);
		int acceptSt = us.getSt(0);
		acceptSt++;
		us.setSt(1, acceptSt);
		int summ = us.summStatic();//add_point_otk_put
		String cnfMessage = Config.getString("Message.add_point_otk_put").replace("%summ%", ""+summ);//add_point_otk_accept
		Bot.sendMessage(us.getId(), cnfMessage);
		}
		
	}

}
