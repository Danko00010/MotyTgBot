package ru.danko.moty;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.pengrad.telegrambot.model.ChatMember;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import com.pengrad.telegrambot.response.GetChatMemberResponse;

import ru.danko.moty.objects.Respon;
import ru.danko.moty.objects.User;
import ru.danko.moty.objects.Users;
import ru.danko.moty.tgbot.Bot;
import ru.danko.moty.tgbot.events.MessageEvnet.onNewChatMessageListener;

public class onNewMessage implements onNewChatMessageListener {
private static HashMap<Long, Respon> respons = new HashMap<Long, Respon>();
	public static HashMap<Long, Respon> getRespons() {
		return respons;
	}
	@SuppressWarnings("removal")
	@Override
	public void onCommandEvent(Update up, String msg) {
		
		if(up.message() == null) return;
		if(up.message().from() == null) return;
		if(msg == null) return;
		if(Config.getString("GroupId").equals("YOUR_GROUP_ID")) {
			if(up.message().chat().id()<0 && msg.equals("/select")) {
				Config.set("GroupId", ""+up.message().chat().id());
				return;
			}
			System.out.println("–û—à–∏–±–∫–∞, –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!");
			return;
		}
		Long userId = up.message().from().id();
		if(up.message().chat().id()<0) return;
		if(msg.equals("null")) return;
		String cmd = msg.split(" ")[0];

    	
    	String MainChatId = Config.getString("GroupId");
		String[] args = msg.replace(cmd+"", "").split(" ");
GetChatMemberResponse chatMain = Bot.getChatMembers(MainChatId, userId);
String status = chatMain.chatMember().status().name();
if(!(status.equals("member")|| status.equals("creator") || status.equals("administrator"))) {//Message.NotMemberGroup
	String cnfMsg = Config.getString("Message.NotMemberGroup");
	Bot.sendMessage(up, cnfMsg);
	return;
}

	if(msg.equals("üë® –ú—É–∂—á–∏–Ω–∞")) {
		if(!Users.check(userId)){
			return;
		}
		User u = Users.conUserName(userId);
		if(u.getStatus()==-1){
			statusM1(up, u, true);
		}
		return;
	}
if(msg.equals("üë© –ñ–µ–Ω—â–∏–Ω–∞")) {
	if(!Users.check(userId)){
		return;
	}
	User u = Users.conUserName(userId);
	if(u.getStatus()==-1){
		statusM1(up, u, false);
	}
	return;
	}
	switch (cmd.toLowerCase()) {
	case "/change_gender":{
		if(!Users.check(userId)){
			return;
		}
		Bot.sendMessage(up, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.", utils.getKeyBoard("üë® –ú—É–∂—á–∏–Ω–∞","üë© –ñ–µ–Ω—â–∏–Ω–∞"));
		User u = Users.conUserName(userId);
		u.setStatus(-1);
		Users.save(u);
		break;
	}
	case "/feedback":{
		if(args.length == 1) {
			Bot.sendMessage(up, "–ü–æ–º–µ—Å—Ç–∏ —Ç–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\r\n"
					+ "\r\n"
					+ "–ü—Ä–∏–º–µ—Ä—ã:\r\n"
					+ "/feedback –•–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ –≥–∏–±–∫–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏\r\n"
					+ "\r\n"
					+ "/feedback –ë–æ—Ç —Å–ª–æ–º–∞–ª—Å—è, —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è(");
			return;
		}
		String messeg = msg.replace(cmd, "");
		feedBack(messeg, Users.conUserName(up.message().from().id()).getUserName());
		break;
	}
	case "/stats":{
		if(!Users.check(userId)){
			return;
		}
		User us = Users.conUserName(userId);
		String cnfMsg = Config.getString("Message.Statistic");
		cnfMsg = cnfMsg.replace("%sendEmp%", us.getSt(1)+"").replace("inviteEmp", us.getSt(1)+"").replace("%companion%", us.getSt(3)+"").replace("%accept%", us.getSt(0)+"").replace("%summ%", us.summStatic()+"");
	 Bot.sendMessage(userId, cnfMsg);
	 	break;
	}
	case "/start":{
		start(up);
	 	break;
	}
	case "–Ω–∞—á–∞—Ç—å":{
		start(up);
		break;
	}
	case "/options":{
		long chatid = new Long(Config.getString("GroupId"));
		List<ChatMember> res =	Bot.getAdministrators(chatid).administrators();
		for(ChatMember mem:res) {
			System.out.println(mem.user().id() +" : "+up.message().from().id());
			if((mem.user().id()+"").equals(up.message().from().id()+"")) {
				
				Map<String, Object> map = Config.getConfig();
				for(String s: map.keySet()) {
					if(s.equals("GroupId") || s.equals("Users") || s.equals("Token")){
						continue;
					}
					String msgC = Config.getString(s);
					s = s.replace(".", ":");
					String[] buts = ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å;"+s).split("@");
					Bot.sendMessage(up.message().from().id(), "–°–æ–æ–±—â–µ–Ω–∏–µ:\n \n"+msgC, utils.getKeyboardMarkup(buts));
				}
			}
		}
		return;
	}
	case "–ø—Ä–æ—Å—Ç–æ":{
		
		if(!Users.check(userId)){
			return;
		}
	
		User us = Users.conUserName(userId);
		if(us.getStatus()==1) {
			String cnfM = Config.getString("Message.textField_companion");
			Bot.sendMessage(up, cnfM,utils.getKeyBoard("–û—Ç–º–µ–Ω–∏—Ç—å", null));
			us.setStatus(300);
			Users.save(us);
		}
		break;
	}
	case "–∑–∞–ø—Ä–æ—Å–∏—Ç—å":{
		if(!Users.check(userId)){
			return;
		}
	
		User us = Users.conUserName(userId);
		if(us.getStatus()==1) {//textField_InviteEmp
			String cnfM = Config.getString("Message.textField_InviteEmp");
			Bot.sendMessage(up, cnfM,utils.getKeyBoard("–û—Ç–º–µ–Ω–∏—Ç—å", null));
			us.setStatus(200);
			Users.save(us);
		}
		break;
	}
	case "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å":{
		if(!Users.check(userId)){
			return;
		}
	
		User us = Users.conUserName(userId);
		if(us.getStatus()==1) {
			String cnfM = Config.getString("Message.textField_SendEmp");
			Bot.sendMessage(up, cnfM,utils.getKeyBoard("–û—Ç–º–µ–Ω–∏—Ç—å", null));
			us.setStatus(100);
			Users.save(us);
		}
		break;
	}//–ó–∞–∫—Ä—ã—Ç—å
	case "–∑–∞–∫—Ä—ã—Ç—å":{
		if(!Users.check(userId)){
			return;
		}
		User us = Users.conUserName(userId);
		if(us.getStatus()>=1) {

			
			if(respons.containsKey(userId)) {
				Respon res  = respons.get(userId);
			res.close();
			respons.remove(userId);
			us.setStatus(0);
			Users.save(us);
			Bot.sendMessage(up, "–ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç",utils.getKeyBoard("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", null));
			return;
			}
			Bot.sendMessage(up, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",utils.getKeyBoard("–ù–∞—á–∞—Ç—å", null));
			return;
		}
		break;
	}
	case "–æ—Ç–º–µ–Ω–∏—Ç—å":{
		if(!Users.check(userId)){
			return;
		}
		User us = Users.conUserName(userId);
		if(us.getStatus()>=1) {
			us.setStatus(0);
			Users.save(us);
			Bot.sendMessage(up, "–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω",utils.getKeyBoard("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", null));
		}
		break;
	}

	default:
		if(!Users.check(userId)){
			return;
		}
		User us = Users.conUserName(userId);
		int st = us.getStatus();
		if(us.getStatus() == 0) {
		Bot.sendMessage(up, "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–≥–æ, –∫–æ–º—É –º–æ–∂–Ω–æ –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",utils.getKeyboardMarkup("–ù–∞—á–∞—Ç—å;start".split("@")));
		Bot.sendMessage(up, "",utils.getKeyBoard("–ù–∞—á–∞—Ç—å", ""));
		}
		if(st==300) {
			String[] spl = msg.split("");
			int i = spl.length;
			if(i<15 || i>600) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã 15, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 600 —Å–∏–º–≤–æ–ª–æ–≤.");
				return;
			}
			Respon res = new Respon(msg, new Long(Config.getString("GroupId")), us, up.message().chat().id());
			respons.put(userId, res);
			Bot.sendMessage(up, "–£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 24).");
			us.setStatus(301);
			return;
		}
		if(st==100) {
			String[] spl = msg.split("");
			int i = spl.length;
			if(i<15 || i>600) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã 15, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 600 —Å–∏–º–≤–æ–ª–æ–≤.");
				return;
			}
			Respon res = new Respon(msg, new Long(Config.getString("GroupId")), us, up.message().chat().id());
			respons.put(userId, res);
			Bot.sendMessage(up, "–£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 24).");
			us.setStatus(101);
			return;
		}
		if(st==200) {
			String[] spl = msg.split("");
			int i = spl.length;
			if(i<15 || i>600) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã 15, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 600 —Å–∏–º–≤–æ–ª–æ–≤.");
				return;
			}
			Respon res = new Respon(msg, new Long(Config.getString("GroupId")), us, up.message().chat().id());
			respons.put(userId, res);
			Bot.sendMessage(up, "–£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 24).");
			us.setStatus(201);
			return;
		}
		if(st==101) {
			String[] spl = msg.split(" ");
			int i = spl.length;
			if(i!=1) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. üßê");
				return;
			}
			int time = new Integer(spl[0]);
			if(time<1 || time>24) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. üßê");
				return;
			}
			Respon res = respons.get(userId);
			res.setTime(time);
			respons.remove(userId);
			respons.put(userId, res);
			String profit = Config.getString("Message.Profit");
			Bot.sendMessage(up, profit, utils.getKeyBoard("–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å", null));
			us.setStatus(102);
			Users.save();
			sendResponse(res, us, up);
		}
		if(st==201) {
			String[] spl = msg.split(" ");
			int i = spl.length;
			if(i!=1) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. üßê");
				return;
			}
			int time = new Integer(spl[0]);
			if(time<1 || time>24) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. üßê");
				return;
			}
			Respon res = respons.get(userId);
			res.setTime(time);
			respons.remove(userId);
			respons.put(userId, res);
			String profit = Config.getString("Message.Profit");
			Bot.sendMessage(up, profit, utils.getKeyBoard("–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å", null));
			us.setStatus(202);
			Users.save();
			sendResponse(res, us, up);
		}
		if(st==301) {
			String[] spl = msg.split(" ");
			int i = spl.length;
			if(i!=1) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. üßê");
				return;
			}
			int time = new Integer(spl[0]);
			if(time<1 || time>24) {
				Bot.sendMessage(up, "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. üßê");
				return;
			}
			Respon res = respons.get(userId);
			res.setTime(time);
			respons.remove(userId);
			respons.put(userId, res);
			String profit = Config.getString("Message.Profit");
			Bot.sendMessage(up, profit, utils.getKeyBoard("–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å", null));
			us.setStatus(302);
			Users.save();
			sendResponse(res, us, up);
		}
		if(us.getRed() != null) {
			Config.set(us.getRed(), msg);
			Bot.sendMessage(up, "–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ!");
			String[] buts = ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å;"+(us.getRed().replace(".", ":"))).split("@");
			us.setRed(null);
			us.setRedMsgId(0);
			Bot.editCallBackQuery(up.message().chat().id(), us.getRedMsgId(), utils.getKeyboardMarkup(buts));
		}
		break;
	}
//	Bot.deleteMessage(up.message().chat().id(), up.message().messageId());
	}
	private void feedBack(String message, String username) {
		@SuppressWarnings("removal")
		long chatid = new Long(Config.getString("GroupId"));
			List<ChatMember> res =	Bot.getAdministrators(chatid).administrators();
		for(ChatMember mem:res) {
			
			Bot.sendMessage(mem.user().id(), "FeedBack(@"+username+"): "+message);
		}
	}
	private void sendResponse(Respon res, User us, Update up) {
		int st = us.getStatus();
		if(st==102) {
			String gender = "";
			if(us.getGender()) {
				gender = "üë¶";
			}else {
				gender = "üë©";
			}
			String firstName = up.message().from().firstName();
			
		String meeees = Config.getString("ChatSend_SendEmp").replace("%message%", res.getMessage()).replace("%gender%", gender).replace("%name%", firstName).replace("%username%", "@"+us.getUserName());
		res.open(meeees);
		respon(us, up, res);
		return;
		}
		if(st==202) {
			String gender = "";
			if(us.getGender()) {
				gender = "üë¶";
			}else {
				gender = "üë©";
			}
			String firstName = up.message().from().firstName();
			
			String meeees = Config.getString("ChatSend_InviteEmp").replace("%message%", res.getMessage()).replace("%gender%", gender).replace("%name%", firstName).replace("%username%", "@"+us.getUserName());
			
		res.open(meeees);
		respon(us, up, res);
		return;
		}
		if(st==302) {
			String gender = "";
			if(us.getGender()) {
				gender = "üë¶";
			}else {
				gender = "üë©";
			}
			String firstName = up.message().from().firstName();
			String meeees = Config.getString("ChatSend_Companion").replace("%message%", res.getMessage()).replace("%gender%", gender).replace("%name%", firstName).replace("%username%", "@"+us.getUserName());
			
		res.open(meeees);
		respon(us, up, res);
		return;
		}
		Bot.sendMessage(up, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :|");
		return;
	}
	private void statusM1(Update up, User u, boolean b) {
		u.setGender(b);
		u.setStatus(0);
		Users.save(u);
		start(up);
	}
	private void respon(User us, Update up, Respon res) {
		respons.remove(us.getId());
		respons.put(us.getId(), res);
		Long time = (long) ((60000*60)*res.getTime());
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				try {
					Thread.sleep(time);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				if(!respons.containsValue(res)) {
					return;
				}
			    us.setStatus(0);
			    Users.save(us);
			   res.close();
			   Bot.editCallBackQuery(res.getChatId(), res.getMessageId(), new InlineKeyboardMarkup());
			   respons.remove(us.getId());
			   
				Bot.sendMessage(up, "–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç, —Ç.–∫. –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è. –õ–∏–±–æ —Ç—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª. üòî", utils.getKeyBoard("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ", null));
			}
		}).start();
	}
	public void start(Update up) {
		if(up.message().chat().id()<1) return;
		Long userId = up.message().from().id();
		if(!Users.check(userId)){
			if(up.message().from().username()== null) {
				Bot.sendMessage(up, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.");
				return;
			}
			Bot.sendMessage(up, Config.getString("Message.welcome"));
			System.out.println(up.message().from());
			User user = new User(userId, up.message().from().username(), -2, up.message().from().firstName());
			Users.addUser(user);
		}
		User u = Users.conUserName(userId);
		if(u.getStatus() == -2) {
			if(up.message().from().username()== null) {
				Bot.sendMessage(up, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.");
				return;
			}
			Bot.sendMessage(up, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.", utils.getKeyBoard("üë® –ú—É–∂—á–∏–Ω–∞","üë© –ñ–µ–Ω—â–∏–Ω–∞"));
			u.setStatus(-1);
			Users.save(u);
			return;
		}
		
			int status = u.getStatus();
			if(status != 0) {
				if(status >= 1) {
					Bot.sendMessage(up, "–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª.");
					return;
				}
				if(status == -1) {
					if(up.message().from().username()== null) {
						Bot.sendMessage(up, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.");
						return;
					}
					Bot.sendMessage(up, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.", utils.getKeyBoard("üë® –ú—É–∂—á–∏–Ω–∞","üë© –ñ–µ–Ω—â–∏–Ω–∞"));
					return;
				}
			}
	//"–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å;putInvite@–ó–∞–ø—Ä–æ—Å–∏—Ç—å;callInvite@–ü—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è;justInvite@–û—Ç–º–µ–Ω–∏—Ç—å;cancel".split("@")
		Bot.sendMessage(up, "–¢—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–º–ø–∞—Ç–∏—é, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è?", utils.getKeyBoard("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å","–ó–∞–ø—Ä–æ—Å–∏—Ç—å", "–ü—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è", "–û—Ç–º–µ–Ω–∏—Ç—å"));
		u.setStatus(1);
		Users.save(u);
	}
	public static void setRespons(HashMap<Long, Respon> hash) {
		onNewMessage.respons = hash; 
		
	}
	public static void newRespons(HashMap<Long, Respon> hash) {
		respons = hash;
		
	}
	
}
